<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/xsl" href="./clojref.xsl"?>

<!DOCTYPE reference [
    <!ENTITY linkspace "&#9141;">
]>

<reference>
    <title> Clojure Quick Reference Card </title>


    <section name="Predicates">

        <spec>(<function>=</function> <onemore><place>val</place></onemore>)</spec>
        <desc>
            <returnvalue>true</returnvalue> if all <place>vals</place> are equal via Java equals(). </desc>

        <spec>(<function>not=</function> <onemore><place>val</place></onemore>)</spec>
        <desc><returnvalue>true</returnvalue> if not all <place>vals</place> are equal via Java equals().</desc>

        <spec>(<function>identical?</function> a b)</spec>
        <desc><returnvalue>true</returnvalue> if <place>a</place> == <place>b</place> in Java, otherwise <returnvalue>false</returnvalue></desc>

        <spec>(<function>==</function> <onemore><place>number</place></onemore>) </spec>
        <desc>
            <returnvalue>true</returnvalue> if all <place>numbers</place> are equal in value. </desc>

        <spec>(<function>&lt;</function> <onemore><place>number</place></onemore>)</spec>
        <spec>(<function>&gt;</function> <onemore><place>number</place></onemore>)</spec>
        <spec>(<function>&lt;=</function> <onemore><place>number</place></onemore>)</spec>
        <spec>(<function>&gt;=</function> <onemore><place>number</place></onemore>)</spec>
        <desc>
            <returnvalue>true</returnvalue> if all <place>numbers</place> are in the order specified by the 
            operator, else <returnvalue>false</returnvalue>.
        </desc>
        
        <spec>(<function>neg?</function> <place>a</place>) </spec>
        <spec>(<function>zero?</function> <place>a</place>) </spec>
        <spec>(<function>pos?</function> <place>a</place>) </spec>
        <desc>
            <returnvalue>true</returnvalue> if a &lt; 0, a = 0, or a &gt; 0 respectively. </desc>

        <spec>(<function>even?</function> <place>a</place>) </spec>
        <spec>(<function>odd?</function> <place>a</place>) </spec>
        <desc>
            <returnvalue>true</returnvalue> if a is even or odd, respectively. </desc>

        <spec>(<function>nil?</function> <place>a</place>)</spec>
        <desc><returnvalue>true</returnvalue> if a is nil, otherwise false.</desc>
        <spec>(<function>true?</function> <place>a</place>)</spec>
        <desc><returnvalue>true</returnvalue> if a is the value true, otherwise false.</desc>
        <spec>(<function>true?</function> <place>a</place>)</spec>
        <desc><returnvalue>true</returnvalue> if a is the value false, otherwise false.</desc>
        
       
        <spec>(<function>bigdec?</function> <place>a</place>) </spec>
        <spec>(<function>char?</function> <place>a</place>) </spec>   
        <spec>(<function>class?</function> <place>a</place>) </spec>        
        <spec>(<function>decimal?</function> <place>a</place>) </spec>
        <spec>(<function>delay?</function> <place>a</place>) </spec>        
        <spec>(<function>double?</function> <place>a</place>) </spec>        
        <spec>(<function>float?</function> <place>a</place>) </spec>
        <spec>(<function>ident?</function> <place>a</place>) </spec>        
        <spec>(<function>int?</function> <place>a</place>) </spec>
        <spec>(<function>integer?</function> <place>a</place>) </spec>
        <spec>(<function>keyword?</function> <place>a</place>) </spec>        
        <spec>(<function>nat-int?</function> <place>a</place>) </spec>        
        <spec>(<function>number?</function> <place>a</place>) </spec>
        <spec>(<function>qualified-keyword?</function> <place>a</place>) </spec>
        <spec>(<function>qualified-symbol?</function> <place>a</place>) </spec>
        <spec>(<function>qualified-ident?</function> <place>a</place>) </spec>        
        <spec>(<function>pos-int?</function> <place>a</place>) </spec>        
        <spec>(<function>ratio?</function> <place>a</place>) </spec>
        <spec>(<function>rational?</function> <place>a</place>) </spec>
        <spec>(<function>simple-keyword?</function> <place>a</place>) </spec>
        <spec>(<function>simple-symbol?</function> <place>a</place>) </spec>
        <spec>(<function>simple-ident?</function> <place>a</place>) </spec>
        <spec>(<function>special-symbol?</function> <place>a</place>) </spec>
        <spec>(<function>string?</function> <place>a</place>) </spec>      
        <spec>(<function>symbol?</function> <place>a</place>) </spec>       
        <spec>(<function>var?</function> <place>a</place>) </spec>
        
        <desc>
            <returnvalue>true</returnvalue> if a is of indicated type. </desc>
        
        
        <spec>(<function>coll?</function> <place>a</place>) </spec>
        <spec>(<function>seq?</function> <place>a</place>) </spec>
        <spec>(<function>vector?</function> <place>a</place>) </spec>
        <spec>(<function>list?</function> <place>a</place>) </spec>
        <spec>(<function>map?</function> <place>a</place>) </spec>
        <spec>(<function>set?</function> <place>a</place>) </spec>
        <desc><returnvalue>true</returnvalue> if a implements standard interface for given metatype.</desc>
        
        
        <spec>(<function>extends?</function> <place>protocol</place> <place>type</place>)</spec>
        <spec>(<function>satisfies?</function> <place>protocal</place> <place>a</place>)</spec>
        <desc><returnvalue>true</returnvalue> if <place>type</place>, or type of <place>a</place>, extends <place>protocol</place>.</desc>
        
        <spec>(<function>instance?</function> <place>javaClass</place> <place>a</place>)</spec>
        <desc><returnvalue>true</returnvalue> if <place>a</place>, after evaluation, is an instance of <place>javaClass</place>.</desc>
    </section>

    <section name="Numeric Functions">

        <spec>(<function>+</function>
            <onemore><place>a</place></onemore>) </spec>
        <spec>(<function>*</function>
            <onemore><place>a</place></onemore>) </spec>
        <desc>Returns <returnvalue>&#931;a</returnvalue> or
                    <returnvalue>&#928;a</returnvalue> respectively. </desc>
        
        <spec>(<function>-</function> <place>x</place> <nonemore><place>y</place></nonemore>)</spec>
        <desc>If no <place>ys</place> provided, <returnvalue>-<place>x</place></returnvalue>, else 
            <returnvalue><place>x</place>-&#931;<place>ys</place></returnvalue>.</desc>
        
        <spec>(<function>/</function> <place>x</place> <nonemore><place>y</place></nonemore>)</spec>
        <desc>If no <place>ys</place> provided, <returnvalue>1/<place>x</place></returnvalue>, else 
            <returnvalue><place>x</place>/&#928;<place>ys</place></returnvalue>.</desc>
        
        <spec>(<function>quot</function> <place>x</place> <place>y</place>)</spec>
        <spec>(<function>rem</function> <place>x</place> <place>y</place>)</spec>
        <desc>Returns quotient or remainder respectively of <place>x</place>/<place>y</place>.</desc>
        
        <spec>(<function>mod</function> <place>x</place> <place>y</place>)</spec>
        <desc><returnvalue><place>x</place> mod <place>y</place></returnvalue>. Unlike <function>rem</function>, a modulus is always positive.</desc>
        
        <spec>(<function>inc</function> <place>x</place>)</spec>
        <spec>(<function>dec</function> <place>x</place>)</spec>
        <desc><returnvalue><place>x+1</place></returnvalue> or <returnvalue><place>x</place>-1</returnvalue> respectively.</desc>

        <spec>(<function>min</function> <onemore><place>x</place></onemore>)</spec>
        <spec>(<function>max</function> <onemore><place>x</place></onemore>)</spec>
        <desc>Returns the lowest, or highest, <place>x</place> respectively.</desc>
        
        <spec>(<function>rand</function> <defaulted default="1.0"><optional><place>x</place></optional></defaulted>)</spec>
        <spec>(<function>rand-int</function> <place>x</place>)</spec>
        <desc>Returns a random float or int respectively, &gt;=0 and &lt;<place>x</place>.</desc>
        
        <spec>(<macro>with-precision</macro> <place>precision</place> <optional>:rounding <defaulted default="HALF_UP">CEILING|FLOOR|HALF_UP|HALF_DOWN|HALF_EVEN|UP|DOWN|UNNECESSARY</defaulted></optional> <onemore>forms</onemore>)</spec>
        <desc>Performs BigDecimal operations in <place>forms</place> with the given precision and rounding method.</desc>
    </section>
    
    <section name="Structure">
        
        <spec>(<special>def</special> <optional>^{ <optional>:private <defaulted default="false">true|false</defaulted></optional>
                                                   <optional>:doc <place>docs</place></optional>
                                                   <optional>:test <place>forms</place></optional>
                                                   <optional>:tag <place>type</place></optional>
            }</optional>
            <place>symbol</place> <optional><place>docstring</place></optional> <optional><place>value</place></optional>)</spec>
        <desc>Creates or locates a global var with the given name, sets it to the given value and returns it.</desc>
        
        <spec>(<macro>defonce</macro> <optional>^{ <optional>:private <defaulted default="false">true|false</defaulted></optional>
            <optional>:doc <place>docs</place></optional>
            <optional>:test <place>forms</place></optional>
            <optional>:tag <place>type</place></optional>
            }</optional>
            <place>symbol</place> <place>value</place>)</spec>
        <desc>Creates a global var with the given name and value and returns it, only if it does not already exist.</desc>
        
        <spec>(<function>intern</function> <place>ns</place> <place>name</place> <optional><place>val</place></optional>)</spec>
        <desc>Creates or locates a global var named by the given name in the given namespace, sets it to val, and returns it.</desc>
    
        <spec>(<macro>declare</macro> <onemore><optional>^{ <optional>:private <defaulted default="false">true|false</defaulted></optional>
            <optional>:doc <place>docs</place></optional>
            <optional>:test <place>forms</place></optional>
            <optional>:tag <place>type</place></optional>
            }</optional>&linkspace;
            <place>symbol</place></onemore>)</spec>
        <desc>Defines all of the given names, without initial values.</desc>
    </section>
    <section name="Sequence">
        
        <spec>(<special>do</special> <nonemore><place>form</place></nonemore> <place>lastform</place>)</spec>
        <desc>Evaluates <math><place>forms</place></math> in order then <returnvalue><place>lastform</place></returnvalue>.</desc>
    </section>
    <section name="Choice">
        <spec>(<special>if</special> <place>test</place> <place>then</place> <place>else</place>)</spec>
        <spec>(<macro>if-not</macro> <place>test</place> <place>else</place> <place>then</place>)</spec>

        <desc><returnvalue><place>then</place></returnvalue> if <place>test</place> is
            true (non-nil, non-zero and non-false), or <returnvalue><place>else</place></returnvalue> otherwise.</desc>

        <spec>(<macro>if-let</macro> [<place>var</place> <place>test</place>] <place>then</place> <optional><place>else</place></optional>)</spec>
        <spec>(<macro>if-some</macro> [<place>var</place> <place>test</place>] <place>then</place> <optional><place>else</place></optional>)</spec>
        
        <desc>If <math><place>test</place></math> is true (or for <math><macro>if-some</macro></math> only non-nil),
                    <returnvalue>(<macro>let</macro> [<place>var</place> <place>test</place>] <place>then</place>)</returnvalue>,
                otherwise <returnvalue><place>else</place></returnvalue>.
        </desc>

        <spec>(<macro>when</macro> <place>test</place> <onemore><place>then</place></onemore>)</spec>
        <spec>(<macro>when-not</macro> <place>test</place> <onemore><place>else</place></onemore>)</spec>
        <spec>(<macro>when-let</macro> [<place>var</place> <place>test</place>] <onemore><place>then</place></onemore>)</spec>
        <spec>(<macro>when-some</macro> [<place>var</place> <place>test</place>] <onemore><place>then</place></onemore>)</spec>
        <desc>Equivalent to <special>if</special>, <macro>if-not</macro>, <macro>if-let</macro> and <macro>if-some</macro> but 
            accepting multiple forms which are wrapped in an implicit <special>do</special>.</desc>
            
        <spec>(<macro>when-first</macro> [<place>var</place> <place>seq</place>] <onemore><place>form</place></onemore>)</spec>
        <desc>If <place>seq</place> is true, <returnvalue>(<special>do</special> <place>forms</place>)</returnvalue> with <place>var</place>
        bound to the first element of <place>seq</place>.</desc>
        
        <spec>(<macro>cond</macro> (<nonemore><place>test</place>&linkspace;<place>value</place></nonemore>))</spec>
        <desc>Evaluates each <place>test</place> in order; when one is true, corresponding <returnvalue><place>value</place></returnvalue>.</desc>
        
        <spec>(<macro>condp</macro> <place>pred</place> <place>expr</place> (<onemore><place>testexpr</place>&linkspace;<place>resultexpr</place>|<place>textexpr</place>&linkspace;:&gt;&gt;&linkspace;<place>resultfn</place></onemore> <optional><place>default</place></optional>))</spec>
        <desc>Evaluates (<place>pred</place> <place>testexpr</place> <place>expr</place>) for each <place>testexpr</place> in order. When one is 
        true, corresponding <returnvalue>resultexpr</returnvalue> or <returnvalue>(<place>resultfn</place> (<place>pred</place> <place>testexpr</place> <place>expr</place>))</returnvalue>. 
        If none are true, <returnvalue>default</returnvalue> or <exception>IllegalArgumentException</exception>.</desc>
        
        <spec>(<macro>cond-&gt;</macro> <place>expr</place> (<onemore><place>test</place>&linkspace;<place>form</place></onemore>)</spec>
        <spec>(<macro>cond-&gt;&gt;</macro> <place>expr</place> (<onemore><place>test</place>&linkspace;<place>form</place></onemore>)</spec>
        <desc>Using <macro>-&gt;</macro> or <macro>-&gt;&gt;</macro> respectively, threads <place>expr</place> through all <place>forms</place> where corresponding 
        <place>tests</place> are true. Note that <place>expr</place> is not passed to any <place>test</place>.</desc>
        
        
    </section>
    <section name="Iteration">

        <spec>(<macro>loop</macro> [<nonemore><place>var</place>&linkspace;<place>binding</place></nonemore>]
                     <nonemore><place>form</place></nonemore>)</spec>
        <desc>Evaluates <place>forms</place> with the given bound vars and serves as a marker
            for <special>recur</special>.</desc>

        <spec>(<special>recur</special> <onemore><place>binding</place></onemore>)</spec>
        <desc>Rebinds vars in the enclosing <macro>loop</macro> to the values of
                    <place>bindings</place> in order, then returns control to the start of
            that <macro>loop</macro>.</desc>

        <spec>(<function>trampoline</function> <place>f</place> <nonemore><place>args</place></nonemore>)</spec>
        <desc>If the value of <math>(<mi>f</mi>
                <mi>args</mi>)</math> is not a function, <returnvalue>(<place>f</place> <place>args</place>)</returnvalue>. Else, 
                    <returnvalue>(<function>trampoline</function> (<place>f</place> <place>args</place>))</returnvalue>.</desc>

        <spec>(<macro>while</macro> <place>test</place> <nonemore><place>form</place></nonemore>)</spec>
        <desc>Evaluates <place>forms</place> until <place>test</place>
            returns false or nil.</desc>
        
        <spec>(<macro>for</macro> [<onemore><place>var</place>&linkspace;<place>listexpr</place>&linkspace;
<optional>:let [<onemore><place>binding</place>&linkspace;<place>expr</place></onemore>]</optional>&linkspace;
<optional>:while <place>expr</place></optional>&linkspace;
<optional>:when <place>expr</place></optional></onemore>] <nonemore><place>form</place></nonemore>)</spec>
        <desc>Evaluates <place>forms</place> with <place>vars</place> bound to all values in each <place>listexpr</place> 
        and returns a sequence of the results.</desc>
        
        <spec>(<macro>doseq</macro> [<onemore><place>var</place>&linkspace;<place>listexpr</place>&linkspace;
            <optional>:let [<onemore><place>binding</place>&linkspace;<place>expr</place></onemore>]</optional>&linkspace;
            <optional>:while <place>expr</place></optional>&linkspace;
            <optional>:when <place>expr</place></optional></onemore>] <nonemore><place>form</place></nonemore>)</spec>
        <desc>Evaluates <place>forms</place> for side effects with <place>vars</place> bound to all values in each <place>listexpr</place> 
            and returns <returnvalue>nil</returnvalue>.</desc>
 
       <spec>(<macro>dotimes</macro> [<place>var</place> <place>max</place>] <nonemore><place>form</place></nonemore>)</spec>
        <desc>Evaluates <place>forms</place> for side effects with <place>var</place> bound to each int from 0 to <place>max</place> minus 1.</desc>
        
    </section>
    
    <section name="Java Interop">
        <spec>(<special>new</special> <place>classname</place> <nonemore><place>arg</place></nonemore>)</spec>
        <spec>(<place>classname</place>. <nonemore><place>arg</place></nonemore>)</spec>
        <desc>Returns a new instance of Java/JavaScript class <place>classname</place>, passing <place>args</place> to the constructor.</desc>
        
        <spec>(.<place>field</place> <place>instance</place> <nonemore><place>arg</place></nonemore>)</spec>
        <spec>(<special>.</special> <place>instance</place> <place>field</place>|(<place>field</place> <nonemore><place>arg</place></nonemore>)|<place>field</place> <nonemore><place>arg</place></nonemore>)</spec>
        <desc>Returns the value of property, or the result of calling method, <place>field</place> in object <place>instance</place>, passing arguments <place>args</place>.</desc>
        
        <spec>(.-<place>field</place> <place>instance</place>)</spec>
        <spec>(<special>.</special> <place>instance</place> <place>-field</place>)</spec>
        <desc>Returns the value of property <place>field</place> in object <place>instance</place>. Cannot call methods.</desc>
        
        <spec>(<place>class</place>/<place>field</place> <nonemore><field>arg</field></nonemore>)</spec>
        <spec>(<special>.</special> <place>class</place> <place>field</place>|(<place>field</place> <nonemore><place>arg</place></nonemore>)|<place>field</place> <nonemore><place>arg</place></nonemore>)</spec>
        <desc>Returns the value of static property, or the result of calling static method, <place>field</place> in class <place>class</place>.</desc>
    
        <spec><place>class</place>/<place>field</place></spec>    
        <desc>Returns the value of static property <place>field</place> in <place>class</place>.</desc>
        
        <spec>(.<place>field</place> <place>class</place> <nonemore><field>arg</field></nonemore>)</spec>
        <desc>Returns the value of property, or the result of calling method, <place>field</place> on the Class object 
            representing class <place>class</place> for reflection.</desc>
        
        <spec>(<macro>..</macro> <place>instance</place>|<place>class</place> <onemore><place>field</place></onemore>)</spec>
        <desc>Nested property access. Equivalent to applying .<place>field</place> for each member of <place>fields</place> 
            in order, starting from <place>instance</place> or <place>class</place>.</desc>
        
        <spec>(<macro>doto</macro> <place>instance</place> <nonemore>(<place>method</place> <nonemore><place>arg</place></nonemore>)</nonemore>)</spec>
        <desc>Calls each method in <place>methods</place> - which must be in .<place>method</place> format - in order, with 
        its appropriate <place>args</place>, on <place>instance</place>.</desc>
        
        <spec>(<macro>gen-class</macro> :name <place>name</place> <optional>:extends <defaulted default="Object">parent</defaulted></optional>
        <optional>:implements [<onemore><place>interface</place></onemore>]</optional> <optional>:init <place>conName</place></optional>
        <optional>:constructors {<onemore>[<onemore><place>paramtype</place></onemore>]&linkspace;[<onemore><place>superparamtype</place></onemore>]</onemore>}</optional>
        <optional>:post-init <value>name</value></optional> <optional>:methods [ <onemore>[<place>name</place> [<nonemore><place>paramtype</place></nonemore>] <place>returntype</place>]</onemore>]</optional>
            <optional>:main <defaulted default="false"><value>bool</value></defaulted></optional> <optional>:factory <value>facname</value></optional> <optional>:state <value>statename</value></optional>
            <optional>:exposes {<onemore><value>fieldname</value>&linkspace;{:get <value>settername</value> :set <place>settername</place>}</onemore>}</optional>
            <optional>:exposes-methods {<onemore><value>supermethodname</value>&linkspace;<value>exposedname</value></onemore>}</optional>
            <optional>:prefix <defaulted default='"-"'><place>string</place></defaulted></optional><optional>:impl-ns <place>namespace</place></optional>
            <optional>:load-impl-ns <defaulted default="true"><place>loadimpl</place></defaulted></optional>)</spec>
        <desc>Creates a compiled class file named <place>name</place> with methods which look up Clojure functions in namespace <place>namespace</place> 
        with names equal to the name of the method prefixed with <place>prefix</place>. </desc>
        
        <spec>(<macro>reify</macro> <onemore><place>parent</place>&linkspace;<nonemore>(<place>method</place> [<onemore><place>arg</place></onemore>] <place>body</place>)</nonemore></onemore>)</spec>
        <desc>Creates an instance of an anonymous class extending each <place>parent</place> and implementing or overriding each <place>method</place>
        in that parent with the code in <place>body</place>.</desc>
    </section>
</reference>
